import React, { useState } from 'react';
import Icon from '../../../components/AppIcon';
import Button from '../../../components/ui/Button';
import Input from '../../../components/ui/Input';

const AddCustomerModal = ({ isOpen, onClose, onSave }) => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    phone: '',
    location: '',
    segment: 'regular',
    tags: []
  });
  const [errors, setErrors] = useState({});
  const [selectedTags, setSelectedTags] = useState([]);

  const availableTags = [
    { value: 'premium', label: 'Premium', color: 'purple' },
    { value: 'wholesale', label: 'Mayorista', color: 'blue' },
    { value: 'loyal', label: 'Fiel', color: 'green' },
    { value: 'potential', label: 'Potencial', color: 'yellow' },
    { value: 'new', label: 'Nuevo', color: 'orange' }
  ];

  const segments = [
    { value: 'vip', label: 'VIP' },
    { value: 'regular', label: 'Regular' },
    { value: 'new', label: 'Nuevo' },
    { value: 'inactive', label: 'Inactivo' }
  ];

  if (!isOpen) return null;

  const validateForm = () => {
    const newErrors = {};

    if (!formData?.name?.trim()) {
      newErrors.name = 'El nombre es obligatorio';
    }

    if (!formData?.email?.trim()) {
      newErrors.email = 'El email es obligatorio';
    } else if (!/\S+@\S+\.\S+/?.test(formData?.email)) {
      newErrors.email = 'El formato del email no es válido';
    }

    if (!formData?.phone?.trim()) {
      newErrors.phone = 'El teléfono es obligatorio';
    }

    setErrors(newErrors);
    return Object.keys(newErrors)?.length === 0;
  };

  const handleSubmit = (e) => {
    e?.preventDefault();
    
    if (validateForm()) {
      const customerData = {
        ...formData,
        tags: selectedTags?.map(tagValue => {
          const tag = availableTags?.find(t => t?.value === tagValue);
          return { name: tag?.label, color: tag?.color };
        }),
        id: Date.now(), // In real app, this would be generated by backend
        avatar: `https://api.dicebear.com/7.x/avataaars/svg?seed=${formData?.name}`,
        totalPurchases: 0,
        orderCount: 0,
        lastInteraction: new Date()?.toISOString(),
        interactionType: 'Registro'
      };

      onSave(customerData);
      handleClose();
    }
  };

  const handleClose = () => {
    setFormData({
      name: '',
      email: '',
      phone: '',
      location: '',
      segment: 'regular',
      tags: []
    });
    setSelectedTags([]);
    setErrors({});
    onClose();
  };

  const handleTagToggle = (tagValue) => {
    setSelectedTags(prev => 
      prev?.includes(tagValue)
        ? prev?.filter(t => t !== tagValue)
        : [...prev, tagValue]
    );
  };

  const getTagColor = (color) => {
    const colors = {
      red: 'bg-red-100 text-red-800 border-red-200',
      blue: 'bg-blue-100 text-blue-800 border-blue-200',
      green: 'bg-green-100 text-green-800 border-green-200',
      yellow: 'bg-yellow-100 text-yellow-800 border-yellow-200',
      purple: 'bg-purple-100 text-purple-800 border-purple-200',
      orange: 'bg-orange-100 text-orange-800 border-orange-200'
    };
    return colors?.[color] || 'bg-gray-100 text-gray-800 border-gray-200';
  };

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <div className="bg-card rounded-lg shadow-xl w-full max-w-2xl max-h-[90vh] overflow-hidden">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-border">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center">
              <Icon name="UserPlus" size={20} className="text-primary" />
            </div>
            <div>
              <h2 className="text-xl font-semibold text-foreground">Agregar Nuevo Cliente</h2>
              <p className="text-sm text-muted-foreground">Complete la información del cliente</p>
            </div>
          </div>
          <Button variant="ghost" size="icon" onClick={handleClose} iconName="X" />
        </div>

        {/* Form */}
        <form onSubmit={handleSubmit} className="p-6 overflow-y-auto max-h-[calc(90vh-140px)]">
          <div className="space-y-6">
            {/* Basic Information */}
            <div>
              <h3 className="font-medium text-foreground mb-4">Información Básica</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <Input
                  label="Nombre Completo"
                  type="text"
                  placeholder="Ej: Juan Pérez"
                  value={formData?.name}
                  onChange={(e) => setFormData({...formData, name: e?.target?.value})}
                  error={errors?.name}
                  required
                />
                <Input
                  label="Email"
                  type="email"
                  placeholder="Ej: juan@email.com"
                  value={formData?.email}
                  onChange={(e) => setFormData({...formData, email: e?.target?.value})}
                  error={errors?.email}
                  required
                />
                <Input
                  label="Teléfono"
                  type="tel"
                  placeholder="Ej: +34 600 123 456"
                  value={formData?.phone}
                  onChange={(e) => setFormData({...formData, phone: e?.target?.value})}
                  error={errors?.phone}
                  required
                />
                <Input
                  label="Ubicación"
                  type="text"
                  placeholder="Ej: Madrid, España"
                  value={formData?.location}
                  onChange={(e) => setFormData({...formData, location: e?.target?.value})}
                />
              </div>
            </div>

            {/* Segment */}
            <div>
              <h3 className="font-medium text-foreground mb-4">Segmentación</h3>
              <div>
                <label className="block text-sm font-medium text-foreground mb-2">
                  Segmento de Cliente
                </label>
                <select
                  value={formData?.segment}
                  onChange={(e) => setFormData({...formData, segment: e?.target?.value})}
                  className="w-full px-3 py-2 border border-border rounded-md bg-background text-foreground focus:ring-2 focus:ring-primary focus:border-transparent"
                >
                  {segments?.map(segment => (
                    <option key={segment?.value} value={segment?.value}>
                      {segment?.label}
                    </option>
                  ))}
                </select>
              </div>
            </div>

            {/* Tags */}
            <div>
              <h3 className="font-medium text-foreground mb-4">Etiquetas</h3>
              <div>
                <label className="block text-sm font-medium text-foreground mb-2">
                  Seleccionar Etiquetas
                </label>
                <div className="flex flex-wrap gap-2">
                  {availableTags?.map(tag => (
                    <button
                      key={tag?.value}
                      type="button"
                      onClick={() => handleTagToggle(tag?.value)}
                      className={`px-3 py-2 text-sm rounded-lg border transition-all ${
                        selectedTags?.includes(tag?.value)
                          ? `${getTagColor(tag?.color)} ring-2 ring-primary/20`
                          : 'bg-background text-foreground border-border hover:bg-muted'
                      }`}
                    >
                      <div className="flex items-center gap-2">
                        <div className={`w-3 h-3 rounded-full bg-${tag?.color}-500`}></div>
                        {tag?.label}
                      </div>
                    </button>
                  ))}
                </div>
                {selectedTags?.length > 0 && (
                  <div className="mt-3">
                    <p className="text-sm text-muted-foreground mb-2">Etiquetas seleccionadas:</p>
                    <div className="flex flex-wrap gap-2">
                      {selectedTags?.map(tagValue => {
                        const tag = availableTags?.find(t => t?.value === tagValue);
                        return (
                          <span
                            key={tagValue}
                            className={`px-2 py-1 text-xs rounded-full border ${getTagColor(tag?.color)}`}
                          >
                            {tag?.label}
                          </span>
                        );
                      })}
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </form>

        {/* Footer */}
        <div className="flex items-center justify-end gap-3 p-6 border-t border-border bg-muted/30">
          <Button variant="outline" onClick={handleClose}>
            Cancelar
          </Button>
          <Button onClick={handleSubmit} iconName="Save">
            Guardar Cliente
          </Button>
        </div>
      </div>
    </div>
  );
};

export default AddCustomerModal;